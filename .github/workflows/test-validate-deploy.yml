name: "Terragrunt Deployment"
on:
  # Manual trigger
  workflow_dispatch:
  push:
    paths:
      - '*/**'
  pull_request:
    branches: [ feature/cicd ]
env:
  tg_version: 'v0.36.1'
  tf_version: 'v1.1.4'
  tf_working_dir: 'Live-env/Shared/resource-group'
  # ARM_USE_OIDC: true
  # ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  # ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  # ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

permissions:
  id-token: write
  contents: read

jobs:
  terragrunt:
    # name:   ${{matrix.runner}} - ${{ matrix.environment }}
    # runs-on: [ '${{ matrix.runner }}']
    # strategy:
    #   max-parallel: 1
    #   matrix:
    #     include:
    #       - environment: test
    #         runner: ubuntu-latest
    #       - environment: prod
    #         runner: ubuntu-18.04
    name: test
    environment: dev
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        working_dir: [
          'Live-env/Shared',
          'Live-env/Hub/Network',
          # 'Live-env/Spoke/Network',
          # 'Live-env/Hub/App',
          # 'Live-env/Spoke/App'
          ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - uses: actions/checkout@v2
      # Install the latest version of Terragrunt CLI and configure the Terragrunt CLI configuration file with a Terragrunt Cloud user API token
      - name: Setup Terraform ${{ env.tf_version }}
        uses: hashicorp/setup-Terraform@v1
        with:
          terraform_version: ${{ env.tf_version }}
          terraform_wrapper: false
      - name: Setup Terraform version
        run: terraform --version
      - name: Setup Terraform wrapper path
        run: which terraform

      - name: Setup Terragrunt ${{ env.tg_version }}
        run: |
          sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/${{ env.tg_version }}/terragrunt_linux_amd64"
          sudo chmod +x /bin/terragrunt
          terragrunt -v

      # - name: Azure Login
      #   uses: azure/login@v1
      #   with:
      #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
      #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      #     subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # - name: debug
      #   run: |
      #     echo "$GITHUB_CONTEXT"
      #     env
      #     echo ${ACTIONS_ID_TOKEN_REQUEST_URL}
      #     echo ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}

      # - name: 'Run az commands'
      #   run: |
      #     az account show
      #     az group list
      #     pwd
      # # Initialize a new or existing Terragrunt working directory by creating initial files, loading any remote state, downloading modules, etc.
      # - name: Terragrunt Init
      #   run: terragrunt init --terragrunt-non-interactive
      #   working-directory: ${{ matrix.working_dir }}

      # Generates an execution plan for Terragrunt
      - name: Terragrunt Plan
        run: terragrunt run-all plan --terragrunt-non-interactive
        continue-on-error: true
        working-directory: ${{ matrix.working_dir }}
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ENV: stg

        # On push to main, build or change infrastructure according to Terragrunt configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terragrunt Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terragrunt Apply
        # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terragrunt apply-all --terragrunt-non-interactive
        working-directory: ${{ matrix.working_dir }}
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ENV: stg

      # - name: 'Terragrunt Init'
      #   uses: the-commons-project/terragrunt-github-actions@master
      #   with:
      #     tf_actions_version: ${{ env.tf_version }}
      #     tg_actions_version: ${{ env.tg_version }}
      #     tf_actions_subcommand: 'init'
      #     tf_actions_working_dir: ${{ env.tf_working_dir }}
      #     tf_actions_comment: true
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: 'Terragrunt Validate'
      #   uses: the-commons-project/terragrunt-github-actions@master
      #   with:
      #     tf_actions_version: ${{ env.tf_version }}
      #     tg_actions_version: ${{ env.tg_version }}
      #     tf_actions_binary: 'terraform'
      #     tf_actions_subcommand: 'validate'
      #     tf_actions_working_dir: ${{ env.tf_working_dir }}
      #     tf_actions_comment: true
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: 'Terragrunt Plan'
      #   uses: the-commons-project/terragrunt-github-actions@master
      #   with:
      #     tf_actions_version: ${{ env.tf_version }}
      #     tg_actions_version: ${{ env.tg_version }}
      #     tf_actions_subcommand: 'plan'
      #     tf_actions_working_dir: ${{ env.tf_working_dir }}
      #     tf_actions_comment: true
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - uses: hashicorp/setup-terraform@v1
      #   with:
      #     terraform_wrapper: false
      # - name: Terraform Init
      #   id: init
      #   run: |
      #      rm -rf .terraform
      #      terraform init -backend-config=${{ matrix.environment }}/backend.tfvars -upgrade=true -no-color -input=false
      # - name: Terraform Plan
      #   id: plan
      #   run: |
      #     terraform plan -input=false -var-file=${{ matrix.environment }}/terraform.tfvars -no-color
      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/main'
      #   id: apply
      #   run: terraform apply -auto-approve -input=false -var-file=${{ matrix.environment }}/terraform.tfvars
      # - name: Terraform destroy
      #   if: github.ref == 'refs/heads/destroy'
      #   id: destroy
      #   run: terraform destroy -auto-approve -input=false -var-file=${{ matrix.environment }}/terraform.tfvars
  comment:
    runs-on: ubuntu-latest
    needs: terragrunt
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/github-script@v5
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ‘‹ Thanks for reporting!'
            })
